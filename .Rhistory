library(arulesViz)
data(Groceries)
summary(Groceries)
# Inspect transactions object
summary(Groceries)
inspect(Groceries)
inspect(Groceries)[1]
tail(sort(itemFrequency(Groceries)),30)
itemFrequencyPlot(Groceries,support=0.01,cex.names=1.0)
tail(sort(itemFrequency(Groceries)), 30)
itemFrequencyPlot(Groceries, support = 0.01, cex.names = 1.0)
inspect(head(Groceries, 3))
tail(sort(itemFrequency(Groceries)), 30)
itemFrequencyPlot(Groceries, support = 0.1, cex.names = 1.0)
groc.rules <- apriori(Groceries, parameter=list(supp=0.01, conf=0.3,
target="rules"))
?apriori
?APparameter
# Apriori algorithm ------------------------------------------------------------
rules <-
apriori(Groceries,
parameter = list(
supp = 0.01, # minimal support
conf = 0.8, # minimal confidence
target = "rules" # what to proritise
# ?APparameter
))
inspect(subset(groc.rules, lift > 3))
plot(Groceries)
plot(groc.rules,
method = "graph",
engine = "htmlwidget",
max = 1000)
groc.hi <- head(sort(groc.rules, by = "lift"), 50)
data(MovieLense)
library(recommenderlab) # For product recommendation
library(tidyverse) # For data preprocessing
source("~/Documents/Aarhus Uni/Exam_Template_2nd_Semester/Customer_Analytics_Template.R", echo=TRUE)
source("~/Documents/Aarhus Uni/Exam_Template_2nd_Semester/Customer_Analytics_Template.R", echo=TRUE)
data(MovieLense)
methods(class=class(MovieLense))
library(pander)
pander(head(moviemeta,2),caption = "First few Rows within Movie Meta Data ")
moviemeta <- MovieLenseMeta
pander(head(moviemeta,2),caption = "First few Rows within Movie Meta Data ")
head(as(MovieLense[1,], "list")[[1]])
head(as(MovieLense[2, ], "list")[[1]])
head(as(MovieLense[2, ], "list")[[2]])
hist(rowCounts(MovieLense))
hist(colCounts(MovieLense))
movie_watched <- data.frame(movie_name = names(colCounts(MovieLense)),
watched_times = colCounts(MovieLense))
top_ten_movies <-
movie_watched[order(movie_watched$watched_times, decreasing = TRUE),][1:10,]
(top_ten_movies <-
movie_watched[order(movie_watched$watched_times, decreasing = TRUE),][1:10,])
movie_watched[order(movie_watched$watched_times, decreasing = TRUE),][1:10,]
?MovieLense
split <- initial_split(rates, prop = 0.8)
library(rsample)
split <- initial_split(rates, prop = 0.8)
rates <- MovieLense[rowCounts(MovieLense) > 30, colCounts(MovieLense) > 100]
rates <- rates[rowCounts(rates) > 30, ]
split <- initial_split(rates, prop = 0.8)
which_train <-
sample(
x = c(TRUE, FALSE),
size = nrow(rates),
replace = TRUE,
prob = c(0.8, 0.2)
)
train <- rates[which_train, ]
test <- rates[!which_train, ]
recommenderRegistry$get_entries(dataType="realRatingMatrix")
recommender_models <- recommenderRegistry$get_entries(dataType="realRatingMatrix")
names(recommender_models)
lapply(recommender_models,"[[","description")
recommender_models$IBCF_realRatingMatrix$parameters
(recommender_models <-
recommenderRegistry$get_entries(dataType = "realRatingMatrix"))
names(recommender_models)
lapply(recommender_models, "[[", "description")
recommender_models$IBCF_realRatingMatrix$parameters
?recommender
?Recommender
methods(Recommender())
methods(Recommender
)
methods("Recommender")
?methods
recc_model <-
Recommender(data = train,
method = "IBCF",
parameter = list(
k = 30, # Number of neighbors to consider
method = "Cosine", # Similarity measure to use
normalize = "Z-score", # Method for normalizing item ratings
na_as_zero = TRUE # Treat NA values as zero (for sparse data)
))
rec_model <- recc_model
rec_predicted <- predict(object = rec_model,
newdata = test,
n = 5) # predictions to make per user
(first_user_recommendations <- rec_predicted@items[[1]])
rec_matrix <- lapply(rec_predicted@items, function(x) colnames(rates)[x])
first_four_users <- recc_matrix[1:4]
recc_matrix[1:4]
rec_matrix[1:4]
rec_matrix_2 <-
sapply(recc_predicted@items, function(x)
colnames(rates)[x])
(recc_matrix_2[,1:4])
rec_matrix_2[,1:4]
rec_model_2 <- Recommender(data = train, method = "UBCF")
# Generate predictions
rec_predicted_2 <-
predict(object = rec_model_2,
newdata = test,
n = 5)
# Create a matrix of recommended items for each user
rec_matrix_2 <-
sapply(recc_predicted@items, function(x)
colnames(rates)[x])
rec_matrix_2 <-
sapply(rec_predicted_2@items, function(x)
colnames(rates)[x])
# Display the recommendations for the first four users
rec_matrix_2[,1:4]
eval_sets <-
evaluationScheme(
data = rates,
method = "cross-validation",
k = 4, # number of folds
given = 20, # use only 20 randomly picked ratings per user to predict
goodRating = 4 # threshold to consider an item as "good"
)
sapply(eval_sets@runsTrain, length)
eval_accuracy <- calcPredictionAccuracy(x = rec_predicted,
data = getData(eval_sets, "unknown"),
byUser = TRUE)
eval_sets <-
evaluationScheme(
data = rates,
method = "cross-validation",
k = 4, # number of folds
given = 20, # use only 20 randomly picked ratings per user to predict
goodRating = 4 # threshold to consider an item as "good"
)
eval_accuracy <- calcPredictionAccuracy(x = rec_predicted,
data = getData(eval_sets, "unknown"),
byUser = TRUE)
?calcPredictionAccuracy()
eval_prediction <-
predict(
object = rec_model,
newdata = getData(eval_sets, "known"),
n = 5,
type = "ratings"
)
eval_accuracy <- calcPredictionAccuracy(x = eval_prediction,
data = getData(eval_sets, "unknown"),
byUser = TRUE)
head(eval_accuracy)
ggplot(data=as.data.frame(eval_accuracy), aes(x=RMSE)) + geom_histogram(binwidth = 0.1) +
ggtitle("Distribution of the RMSE by user")
ggplot(data = as.data.frame(eval_accuracy),
aes(x = RMSE)) + geom_histogram(binwidth = 0.1) +
ggtitle("Distribution of the RMSE by user")
ggplot(data = as.data.frame(eval_accuracy),
aes(x = RMSE)) +
geom_histogram(binwidth = 0.1) +
ggtitle("Distribution of the RMSE by user")
source("~/Documents/Aarhus Uni/Exam_Template_2nd_Semester/Customer_Analytics_Template.R", echo=TRUE)
ggplot(data = as.data.frame(eval_accuracy), aes(x = RMSE)) +
geom_histogram(binwidth = 0.1) +
ggtitle("Distribution of the RMSE by user")
calcPredictionAccuracy(x = eval_prediction,
data = getData(eval_sets, "unknown"),
byUser = FALSE)
results <-
evaluate(x = eval_sets,
method = model_to_evaluate,
n = seq(10, 100, 10))
results <-
evaluate(x = eval_sets,
method = "IBCF",
n = seq(10, 100, 10))
head(getConfusionMatrix(results)[[1]])
columns_to_sum <- c("TP", "FP", "FN", "TN")
indices_summed <- Reduce("+", getConfusionMatrix(results))[, columns_to_sum]
head(indices_summed)
plot(results, annotate = TRUE, main = "ROC curve")
plot(results, "prec/rec", annotate = TRUE, main = "Precision-Recall")
models_to_evaluate <- list(
IBCF_cos = list(name = "IBCF", param = list(method = "cosine")),
IBCF_cor = list(name = "IBCF", param = list(method = "pearson")),
UBCF_cos = list(name = "UBCF", param = list(method = "cosine")),
UBCF_cor = list(name = "UBCF", param = list(method = "pearson")),
random = list(name = "RANDOM", param = NULL)
)
n_recommendations <- c(1, 5, seq(10, 100, 10))
list_results <-
evaluate(x = eval_sets, method = models_to_evaluate, n = n_recommendations)
plot(list_results, annotate = 1, legend = "topleft")
title("ROC curve")
plot(
list_results,
"prec/rec",
annotate = 1,
legend = "bottomright",
ylim = c(0, 0.4)
)
title("Precision-recall")
head(indices_summed)
